// reading trajetory files.

#pragma once

#ifndef TRAJECTORY_H
#define TRAJECTORY_H

#include <map>
#include <vector>
#include <fstream>

#include "simulation.h"

using namespace std;

// Stores atom position and charge.
struct atom {
    int id;
    double x, y, z, q;
};

// Stores bonded pair info.
struct bond {
    int id_1, id_2;
    int order;
    bond() : order(0) {}
    bond(int a, int b) : id_1(a), id_2(b), order(1) {
    }
};

// Stores all information in one frame.
struct TrajFrame {
    vector<atom> atoms;
    vector<bond> bonds;

    void clear() {
        atoms.clear();
        bonds.clear();
    }
};

// Interface of trajectory reader
// You may write your own trajectory reader, as long as the functions are implemented.
class TrajReader {
public:

    // Open the trajectory file. Error ==> Return 1, throw; Safe ==> Return 0;
    virtual int Open(const string&) = 0;

    // Executed before read first frame. Fill the metadata of simulation.
    // For trajectory that has no head, you can read first frame here and store it in
    // a buffer, then output the result when ReadTrjFrame is first called.
    virtual int ReadTrjHead(Simulation*) = 0;

    // Executed in the read loop.
    virtual int ReadTrjFrame(TrajFrame&, const Simulation&) = 0;
};


// reader of ReaxFF trajectory file generated by LAMMPS 'pair_style reax/c'
class ReaxTrajReader : public TrajReader {
public:

	struct Config {
		map<int, vector<double> > bondorder_cutoff;
		vector<double> bondorder_cutoff_default;

		int read_atompos;
		int count_bondorder;
		Config() : read_atompos(0) {
		}
	};
	
	map<int, vector<double> > bondorders; // Bond order statistics

	ReaxTrajReader() : config() {
	}
	ReaxTrajReader(const Config& c) : config(c){
	}

	int Open(const string& path);

	int ReadTrjHead(Simulation* simulation);

	int ReadTrjFrame(TrajFrame&, const Simulation&);

private:
	Config config;
	ifstream trjfile;
	int frameCount;
};
#endif // !TRAJECTORY_H
