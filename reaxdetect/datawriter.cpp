
#include <iomanip>

#include "datawriter.h"
#include "filenamehandler.h"
#include "numarray.h"
#include "stringconvert.h"

#define FILENAME_LENGTH 37
#define RWDXHEADER	"RAWDX2FF"
#define EMPTY_BUFFER_COUNT	256

const int BlockMark = 0xFFFF;
const int ElementMark = 0xFF00;

struct RwdxConfig {
	int dense_freq;
};

int ReaxDataWriter::Dump(const string& path, const string& path_reac, const ReaxReader& reader) {
	ofstream outfile(path, ios_base::out);
	ofstream outfile_reac(path_reac, ios_base::out);

	outfile << "t," << join(reader.species);
	outfile_reac << "t";
	for (const auto& s : reader.reactions) {
		outfile_reac << ',' << s.to_string(reader.species) << ',' << (-s).to_string(reader.species);
	}

	double t = 0;
	for (const auto& fs : reader.fss) {
		outfile << "\n" << fs.t << "," << join(fs.mol_freq);
		outfile_reac << "\n" << fs.t;
		for (const auto& f : fs.reaction_freq) {
			outfile_reac << "," << f.first << "," << f.second;
		}
	}
	outfile.close();
	outfile_reac.close();
	return 0;
}

int ReaxDataWriter::WriteSample(const string& sample_path, const ReaxAnalyzer& analyzer)
{
	ofstream outfile(sample_path, ios_base::out);
	outfile << "SPECIES\nt,";
	outfile << join(analyzer.species) << "\n";
	for (const auto& sample : analyzer.samples) {
		outfile << sample.t << "," << join(sample.c) << "\n";
	}
	outfile << "END\nREACTIONS\nt,";
	outfile << join(analyzer.reactions) << "\n";
	for (const auto& sample : analyzer.samples) {
		outfile << sample.t << "," << join(sample.r) << "\n";
	}
	outfile << "END\nINIT\n";
	for (const auto& i : analyzer.init) {
		outfile << i.first << "," << i.second << "\n";
	}
	outfile << "END";
	outfile.close();
	return 0;
}

int ReaxDataWriter::WriteReport(const string & path, const ReaxAnalyzer & analyzer)
{
	ofstream outfile(path, ios_base::out);
	outfile << "Molecules:\n";
	outfile << "index,name,life(ps);" << endl;
	outfile << setprecision(4);
	for (size_t i = 0; i < analyzer.species.size(); i++) {
		outfile << i << "," << analyzer.species[i] << "," << analyzer.species_life[i] << endl;
	}
	outfile << "Reactions\n";
	outfile << "index,reaction,freqplus,freqminus\n";
	for (size_t i = 0; i < analyzer.reactions.size(); i++) {
		outfile << i << "," << analyzer.reactions[i] << "," << analyzer.rp[i] << "," << analyzer.rm[i] << endl;
	}

	outfile.close();

	return 0;
}

int ReaxDataWriter::WriteKineticFile(const string & path, const ReaxAnalyzer & analyzer)
{
	ofstream outfile(path);
	outfile << "# This file is generated by ReaxDetect.\n";
	outfile << "ELEMENTS\n" << join(analyzer.elements, "\n") << "\nEND\n";

	//species
	outfile << "SPECIES\n" << join(analyzer.species, "\n") << "\nEND\n";

	//reactions
	outfile << "REACTIONS" << endl;
	for (size_t i = 0; i < analyzer.reactions.size(); i++) {
		outfile << analyzer.reactions[i] << "\t" << analyzer.kp[i] << "\t" << analyzer.km[i] << endl;
	}
	outfile << "END" << endl;
	outfile.close();

	return 0;
}

int ReaxDataWriter::WriteRawReactionFreq(const string & path, const ReaxAnalyzer & analyzer)
{
	ofstream outfile(path, ios_base::out);
	outfile << "Reaction,Freq_pro,Base_pro,Freq_con,Base_con" << endl;
	for (size_t i = 0; i < analyzer.reactions.size(); i++) {
		outfile << analyzer.reactions[i] << ',' << analyzer.rp[i] << ',' << analyzer.sum_product_p[i]
			<< ',' << analyzer.rm[i] << ',' << analyzer.sum_product_m[i] << endl;
	}
	outfile.close();
	return 0;
}
